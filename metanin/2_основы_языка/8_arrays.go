package main

import "fmt"

/*
Массивы
https://metanit.com/go/tutorial/2.8.php

Массив - набор элементов 1 вида, который имеет заранее обозначенную строгую длину


Похожая структура - срезы => https://metanit.com/go/tutorial/2.13.php
*/

func main() {

	// 1 первый массив
	var ints [5]int
	ints[0] = 1
	ints[1] = 2
	ints[2] = 2
	ints[3] = 4

	fmt.Println(ints)

	// ==================================================================================================================
	// 2 ещё вариант
	var ints2 [5]int = [5]int{1, 2, 3, 4}
	fmt.Println(ints2)

	// ==================================================================================================================
	// 3 сокращённый вариант
	ints3 := [5]int{1, 1, 1}
	fmt.Println(ints3)

	// ==================================================================================================================
	// 4 можно даже не указывать длину, она высчитается автоматом
	ints4 := [...]int{1, 2, 3, 4, 5, 6, 7, 8}
	ints5 := [...]int{1, 4, 5, 5}
	fmt.Println(ints4, ints5)

	var q [5]int
	var qq [5]int

	q[0] = 100
	qq = q

	fmt.Println(q, qq, q == qq)
	qq[1] = 15
	fmt.Println(q == qq)

	// ошибка => длина массива это тоже часть типа =>  (mismatched types [5]int and [4]int)
	// var w [5]int
	// var ww [4]int
	// fmt.Println(w == ww)

	// ==================================================================================================================
	// многомерные массивы

	ids := [2][2]int{
		{1, 2},
		{3, 4},
	}

	fmt.Println(ids)

	// ==================================================================================================================
	// перебор многомерного массива

	for __, v := range ids {
		for _2, v2 := range v {
			fmt.Printf("KEY %d, key2 %d V2 %d\n", __, _2, v2)
		}
		fmt.Println()
	}

}
